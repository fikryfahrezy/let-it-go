// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/fikryfahrezy/let-it-go/feature/user/service"
	"github.com/google/uuid"
)

type FakeUserService struct {
	CreateUserStub        func(context.Context, service.CreateUserRequest) (service.CreateUserResponse, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		arg1 context.Context
		arg2 service.CreateUserRequest
	}
	createUserReturns struct {
		result1 service.CreateUserResponse
		result2 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 service.CreateUserResponse
		result2 error
	}
	DeleteUserStub        func(context.Context, uuid.UUID) error
	deleteUserMutex       sync.RWMutex
	deleteUserArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	deleteUserReturns struct {
		result1 error
	}
	deleteUserReturnsOnCall map[int]struct {
		result1 error
	}
	GetUserByIDStub        func(context.Context, uuid.UUID) (service.GetUserResponse, error)
	getUserByIDMutex       sync.RWMutex
	getUserByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getUserByIDReturns struct {
		result1 service.GetUserResponse
		result2 error
	}
	getUserByIDReturnsOnCall map[int]struct {
		result1 service.GetUserResponse
		result2 error
	}
	ListUsersStub        func(context.Context, service.ListUsersRequest) ([]service.ListUsersResponse, int64, error)
	listUsersMutex       sync.RWMutex
	listUsersArgsForCall []struct {
		arg1 context.Context
		arg2 service.ListUsersRequest
	}
	listUsersReturns struct {
		result1 []service.ListUsersResponse
		result2 int64
		result3 error
	}
	listUsersReturnsOnCall map[int]struct {
		result1 []service.ListUsersResponse
		result2 int64
		result3 error
	}
	UpdateUserStub        func(context.Context, uuid.UUID, service.UpdateUserRequest) (service.UpdateUserResponse, error)
	updateUserMutex       sync.RWMutex
	updateUserArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 service.UpdateUserRequest
	}
	updateUserReturns struct {
		result1 service.UpdateUserResponse
		result2 error
	}
	updateUserReturnsOnCall map[int]struct {
		result1 service.UpdateUserResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserService) CreateUser(arg1 context.Context, arg2 service.CreateUserRequest) (service.CreateUserResponse, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		arg1 context.Context
		arg2 service.CreateUserRequest
	}{arg1, arg2})
	stub := fake.CreateUserStub
	fakeReturns := fake.createUserReturns
	fake.recordInvocation("CreateUser", []interface{}{arg1, arg2})
	fake.createUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserService) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeUserService) CreateUserCalls(stub func(context.Context, service.CreateUserRequest) (service.CreateUserResponse, error)) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = stub
}

func (fake *FakeUserService) CreateUserArgsForCall(i int) (context.Context, service.CreateUserRequest) {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	argsForCall := fake.createUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserService) CreateUserReturns(result1 service.CreateUserResponse, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 service.CreateUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) CreateUserReturnsOnCall(i int, result1 service.CreateUserResponse, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 service.CreateUserResponse
			result2 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 service.CreateUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) DeleteUser(arg1 context.Context, arg2 uuid.UUID) error {
	fake.deleteUserMutex.Lock()
	ret, specificReturn := fake.deleteUserReturnsOnCall[len(fake.deleteUserArgsForCall)]
	fake.deleteUserArgsForCall = append(fake.deleteUserArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.DeleteUserStub
	fakeReturns := fake.deleteUserReturns
	fake.recordInvocation("DeleteUser", []interface{}{arg1, arg2})
	fake.deleteUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserService) DeleteUserCallCount() int {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return len(fake.deleteUserArgsForCall)
}

func (fake *FakeUserService) DeleteUserCalls(stub func(context.Context, uuid.UUID) error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = stub
}

func (fake *FakeUserService) DeleteUserArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	argsForCall := fake.deleteUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserService) DeleteUserReturns(result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	fake.deleteUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) DeleteUserReturnsOnCall(i int, result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	if fake.deleteUserReturnsOnCall == nil {
		fake.deleteUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserService) GetUserByID(arg1 context.Context, arg2 uuid.UUID) (service.GetUserResponse, error) {
	fake.getUserByIDMutex.Lock()
	ret, specificReturn := fake.getUserByIDReturnsOnCall[len(fake.getUserByIDArgsForCall)]
	fake.getUserByIDArgsForCall = append(fake.getUserByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetUserByIDStub
	fakeReturns := fake.getUserByIDReturns
	fake.recordInvocation("GetUserByID", []interface{}{arg1, arg2})
	fake.getUserByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserService) GetUserByIDCallCount() int {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	return len(fake.getUserByIDArgsForCall)
}

func (fake *FakeUserService) GetUserByIDCalls(stub func(context.Context, uuid.UUID) (service.GetUserResponse, error)) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = stub
}

func (fake *FakeUserService) GetUserByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getUserByIDMutex.RLock()
	defer fake.getUserByIDMutex.RUnlock()
	argsForCall := fake.getUserByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserService) GetUserByIDReturns(result1 service.GetUserResponse, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	fake.getUserByIDReturns = struct {
		result1 service.GetUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) GetUserByIDReturnsOnCall(i int, result1 service.GetUserResponse, result2 error) {
	fake.getUserByIDMutex.Lock()
	defer fake.getUserByIDMutex.Unlock()
	fake.GetUserByIDStub = nil
	if fake.getUserByIDReturnsOnCall == nil {
		fake.getUserByIDReturnsOnCall = make(map[int]struct {
			result1 service.GetUserResponse
			result2 error
		})
	}
	fake.getUserByIDReturnsOnCall[i] = struct {
		result1 service.GetUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) ListUsers(arg1 context.Context, arg2 service.ListUsersRequest) ([]service.ListUsersResponse, int64, error) {
	fake.listUsersMutex.Lock()
	ret, specificReturn := fake.listUsersReturnsOnCall[len(fake.listUsersArgsForCall)]
	fake.listUsersArgsForCall = append(fake.listUsersArgsForCall, struct {
		arg1 context.Context
		arg2 service.ListUsersRequest
	}{arg1, arg2})
	stub := fake.ListUsersStub
	fakeReturns := fake.listUsersReturns
	fake.recordInvocation("ListUsers", []interface{}{arg1, arg2})
	fake.listUsersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUserService) ListUsersCallCount() int {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	return len(fake.listUsersArgsForCall)
}

func (fake *FakeUserService) ListUsersCalls(stub func(context.Context, service.ListUsersRequest) ([]service.ListUsersResponse, int64, error)) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = stub
}

func (fake *FakeUserService) ListUsersArgsForCall(i int) (context.Context, service.ListUsersRequest) {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	argsForCall := fake.listUsersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserService) ListUsersReturns(result1 []service.ListUsersResponse, result2 int64, result3 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	fake.listUsersReturns = struct {
		result1 []service.ListUsersResponse
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUserService) ListUsersReturnsOnCall(i int, result1 []service.ListUsersResponse, result2 int64, result3 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	if fake.listUsersReturnsOnCall == nil {
		fake.listUsersReturnsOnCall = make(map[int]struct {
			result1 []service.ListUsersResponse
			result2 int64
			result3 error
		})
	}
	fake.listUsersReturnsOnCall[i] = struct {
		result1 []service.ListUsersResponse
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUserService) UpdateUser(arg1 context.Context, arg2 uuid.UUID, arg3 service.UpdateUserRequest) (service.UpdateUserResponse, error) {
	fake.updateUserMutex.Lock()
	ret, specificReturn := fake.updateUserReturnsOnCall[len(fake.updateUserArgsForCall)]
	fake.updateUserArgsForCall = append(fake.updateUserArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 service.UpdateUserRequest
	}{arg1, arg2, arg3})
	stub := fake.UpdateUserStub
	fakeReturns := fake.updateUserReturns
	fake.recordInvocation("UpdateUser", []interface{}{arg1, arg2, arg3})
	fake.updateUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserService) UpdateUserCallCount() int {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	return len(fake.updateUserArgsForCall)
}

func (fake *FakeUserService) UpdateUserCalls(stub func(context.Context, uuid.UUID, service.UpdateUserRequest) (service.UpdateUserResponse, error)) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = stub
}

func (fake *FakeUserService) UpdateUserArgsForCall(i int) (context.Context, uuid.UUID, service.UpdateUserRequest) {
	fake.updateUserMutex.RLock()
	defer fake.updateUserMutex.RUnlock()
	argsForCall := fake.updateUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserService) UpdateUserReturns(result1 service.UpdateUserResponse, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	fake.updateUserReturns = struct {
		result1 service.UpdateUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) UpdateUserReturnsOnCall(i int, result1 service.UpdateUserResponse, result2 error) {
	fake.updateUserMutex.Lock()
	defer fake.updateUserMutex.Unlock()
	fake.UpdateUserStub = nil
	if fake.updateUserReturnsOnCall == nil {
		fake.updateUserReturnsOnCall = make(map[int]struct {
			result1 service.UpdateUserResponse
			result2 error
		})
	}
	fake.updateUserReturnsOnCall[i] = struct {
		result1 service.UpdateUserResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeUserService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.UserService = new(FakeUserService)
