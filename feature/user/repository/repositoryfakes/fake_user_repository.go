// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"context"
	"sync"

	"github.com/fikryfahrezy/let-it-go/feature/user/repository"
	"github.com/google/uuid"
)

type FakeUserRepository struct {
	CountStub        func(context.Context) (int64, error)
	countMutex       sync.RWMutex
	countArgsForCall []struct {
		arg1 context.Context
	}
	countReturns struct {
		result1 int64
		result2 error
	}
	countReturnsOnCall map[int]struct {
		result1 int64
		result2 error
	}
	CreateStub        func(context.Context, repository.User) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 repository.User
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(context.Context, uuid.UUID) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetByEmailStub        func(context.Context, string) (repository.User, error)
	getByEmailMutex       sync.RWMutex
	getByEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getByEmailReturns struct {
		result1 repository.User
		result2 error
	}
	getByEmailReturnsOnCall map[int]struct {
		result1 repository.User
		result2 error
	}
	GetByIDStub        func(context.Context, uuid.UUID) (repository.User, error)
	getByIDMutex       sync.RWMutex
	getByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getByIDReturns struct {
		result1 repository.User
		result2 error
	}
	getByIDReturnsOnCall map[int]struct {
		result1 repository.User
		result2 error
	}
	ListStub        func(context.Context, int, int) ([]repository.User, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	listReturns struct {
		result1 []repository.User
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []repository.User
		result2 error
	}
	UpdateStub        func(context.Context, repository.User) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 repository.User
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserRepository) Count(arg1 context.Context) (int64, error) {
	fake.countMutex.Lock()
	ret, specificReturn := fake.countReturnsOnCall[len(fake.countArgsForCall)]
	fake.countArgsForCall = append(fake.countArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CountStub
	fakeReturns := fake.countReturns
	fake.recordInvocation("Count", []interface{}{arg1})
	fake.countMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeUserRepository) CountCalls(stub func(context.Context) (int64, error)) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = stub
}

func (fake *FakeUserRepository) CountArgsForCall(i int) context.Context {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	argsForCall := fake.countArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUserRepository) CountReturns(result1 int64, result2 error) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	fake.countReturns = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) CountReturnsOnCall(i int, result1 int64, result2 error) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	if fake.countReturnsOnCall == nil {
		fake.countReturnsOnCall = make(map[int]struct {
			result1 int64
			result2 error
		})
	}
	fake.countReturnsOnCall[i] = struct {
		result1 int64
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) Create(arg1 context.Context, arg2 repository.User) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 repository.User
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeUserRepository) CreateCalls(stub func(context.Context, repository.User) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeUserRepository) CreateArgsForCall(i int) (context.Context, repository.User) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) Delete(arg1 context.Context, arg2 uuid.UUID) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeUserRepository) DeleteCalls(stub func(context.Context, uuid.UUID) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeUserRepository) DeleteArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) GetByEmail(arg1 context.Context, arg2 string) (repository.User, error) {
	fake.getByEmailMutex.Lock()
	ret, specificReturn := fake.getByEmailReturnsOnCall[len(fake.getByEmailArgsForCall)]
	fake.getByEmailArgsForCall = append(fake.getByEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetByEmailStub
	fakeReturns := fake.getByEmailReturns
	fake.recordInvocation("GetByEmail", []interface{}{arg1, arg2})
	fake.getByEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) GetByEmailCallCount() int {
	fake.getByEmailMutex.RLock()
	defer fake.getByEmailMutex.RUnlock()
	return len(fake.getByEmailArgsForCall)
}

func (fake *FakeUserRepository) GetByEmailCalls(stub func(context.Context, string) (repository.User, error)) {
	fake.getByEmailMutex.Lock()
	defer fake.getByEmailMutex.Unlock()
	fake.GetByEmailStub = stub
}

func (fake *FakeUserRepository) GetByEmailArgsForCall(i int) (context.Context, string) {
	fake.getByEmailMutex.RLock()
	defer fake.getByEmailMutex.RUnlock()
	argsForCall := fake.getByEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) GetByEmailReturns(result1 repository.User, result2 error) {
	fake.getByEmailMutex.Lock()
	defer fake.getByEmailMutex.Unlock()
	fake.GetByEmailStub = nil
	fake.getByEmailReturns = struct {
		result1 repository.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetByEmailReturnsOnCall(i int, result1 repository.User, result2 error) {
	fake.getByEmailMutex.Lock()
	defer fake.getByEmailMutex.Unlock()
	fake.GetByEmailStub = nil
	if fake.getByEmailReturnsOnCall == nil {
		fake.getByEmailReturnsOnCall = make(map[int]struct {
			result1 repository.User
			result2 error
		})
	}
	fake.getByEmailReturnsOnCall[i] = struct {
		result1 repository.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetByID(arg1 context.Context, arg2 uuid.UUID) (repository.User, error) {
	fake.getByIDMutex.Lock()
	ret, specificReturn := fake.getByIDReturnsOnCall[len(fake.getByIDArgsForCall)]
	fake.getByIDArgsForCall = append(fake.getByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetByIDStub
	fakeReturns := fake.getByIDReturns
	fake.recordInvocation("GetByID", []interface{}{arg1, arg2})
	fake.getByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) GetByIDCallCount() int {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return len(fake.getByIDArgsForCall)
}

func (fake *FakeUserRepository) GetByIDCalls(stub func(context.Context, uuid.UUID) (repository.User, error)) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = stub
}

func (fake *FakeUserRepository) GetByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	argsForCall := fake.getByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) GetByIDReturns(result1 repository.User, result2 error) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = nil
	fake.getByIDReturns = struct {
		result1 repository.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) GetByIDReturnsOnCall(i int, result1 repository.User, result2 error) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = nil
	if fake.getByIDReturnsOnCall == nil {
		fake.getByIDReturnsOnCall = make(map[int]struct {
			result1 repository.User
			result2 error
		})
	}
	fake.getByIDReturnsOnCall[i] = struct {
		result1 repository.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) List(arg1 context.Context, arg2 int, arg3 int) ([]repository.User, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserRepository) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeUserRepository) ListCalls(stub func(context.Context, int, int) ([]repository.User, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeUserRepository) ListArgsForCall(i int) (context.Context, int, int) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUserRepository) ListReturns(result1 []repository.User, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []repository.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) ListReturnsOnCall(i int, result1 []repository.User, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []repository.User
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []repository.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserRepository) Update(arg1 context.Context, arg2 repository.User) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 repository.User
	}{arg1, arg2})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUserRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeUserRepository) UpdateCalls(stub func(context.Context, repository.User) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeUserRepository) UpdateArgsForCall(i int) (context.Context, repository.User) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUserRepository) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUserRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.UserRepository = new(FakeUserRepository)
