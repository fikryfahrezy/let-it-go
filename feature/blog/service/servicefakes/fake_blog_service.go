// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/fikryfahrezy/let-it-go/feature/blog/service"
	"github.com/fikryfahrezy/let-it-go/pkg/http_server"
	"github.com/google/uuid"
)

type FakeBlogService struct {
	ArchiveBlogStub        func(context.Context, uuid.UUID) (service.GetBlogResponse, error)
	archiveBlogMutex       sync.RWMutex
	archiveBlogArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	archiveBlogReturns struct {
		result1 service.GetBlogResponse
		result2 error
	}
	archiveBlogReturnsOnCall map[int]struct {
		result1 service.GetBlogResponse
		result2 error
	}
	CreateBlogStub        func(context.Context, service.CreateBlogRequest) (service.GetBlogResponse, error)
	createBlogMutex       sync.RWMutex
	createBlogArgsForCall []struct {
		arg1 context.Context
		arg2 service.CreateBlogRequest
	}
	createBlogReturns struct {
		result1 service.GetBlogResponse
		result2 error
	}
	createBlogReturnsOnCall map[int]struct {
		result1 service.GetBlogResponse
		result2 error
	}
	DeleteBlogStub        func(context.Context, uuid.UUID) error
	deleteBlogMutex       sync.RWMutex
	deleteBlogArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	deleteBlogReturns struct {
		result1 error
	}
	deleteBlogReturnsOnCall map[int]struct {
		result1 error
	}
	GetBlogByIDStub        func(context.Context, uuid.UUID) (service.GetBlogResponse, error)
	getBlogByIDMutex       sync.RWMutex
	getBlogByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getBlogByIDReturns struct {
		result1 service.GetBlogResponse
		result2 error
	}
	getBlogByIDReturnsOnCall map[int]struct {
		result1 service.GetBlogResponse
		result2 error
	}
	GetBlogsByAuthorStub        func(context.Context, uuid.UUID, http_server.PaginationRequest) ([]service.GetBlogResponse, int, error)
	getBlogsByAuthorMutex       sync.RWMutex
	getBlogsByAuthorArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 http_server.PaginationRequest
	}
	getBlogsByAuthorReturns struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}
	getBlogsByAuthorReturnsOnCall map[int]struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}
	GetBlogsByStatusStub        func(context.Context, string, http_server.PaginationRequest) ([]service.GetBlogResponse, int, error)
	getBlogsByStatusMutex       sync.RWMutex
	getBlogsByStatusArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 http_server.PaginationRequest
	}
	getBlogsByStatusReturns struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}
	getBlogsByStatusReturnsOnCall map[int]struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}
	ListBlogsStub        func(context.Context, http_server.PaginationRequest) ([]service.GetBlogResponse, int, error)
	listBlogsMutex       sync.RWMutex
	listBlogsArgsForCall []struct {
		arg1 context.Context
		arg2 http_server.PaginationRequest
	}
	listBlogsReturns struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}
	listBlogsReturnsOnCall map[int]struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}
	PublishBlogStub        func(context.Context, uuid.UUID) (service.GetBlogResponse, error)
	publishBlogMutex       sync.RWMutex
	publishBlogArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	publishBlogReturns struct {
		result1 service.GetBlogResponse
		result2 error
	}
	publishBlogReturnsOnCall map[int]struct {
		result1 service.GetBlogResponse
		result2 error
	}
	UpdateBlogStub        func(context.Context, uuid.UUID, service.UpdateBlogRequest) (service.GetBlogResponse, error)
	updateBlogMutex       sync.RWMutex
	updateBlogArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 service.UpdateBlogRequest
	}
	updateBlogReturns struct {
		result1 service.GetBlogResponse
		result2 error
	}
	updateBlogReturnsOnCall map[int]struct {
		result1 service.GetBlogResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlogService) ArchiveBlog(arg1 context.Context, arg2 uuid.UUID) (service.GetBlogResponse, error) {
	fake.archiveBlogMutex.Lock()
	ret, specificReturn := fake.archiveBlogReturnsOnCall[len(fake.archiveBlogArgsForCall)]
	fake.archiveBlogArgsForCall = append(fake.archiveBlogArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.ArchiveBlogStub
	fakeReturns := fake.archiveBlogReturns
	fake.recordInvocation("ArchiveBlog", []interface{}{arg1, arg2})
	fake.archiveBlogMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogService) ArchiveBlogCallCount() int {
	fake.archiveBlogMutex.RLock()
	defer fake.archiveBlogMutex.RUnlock()
	return len(fake.archiveBlogArgsForCall)
}

func (fake *FakeBlogService) ArchiveBlogCalls(stub func(context.Context, uuid.UUID) (service.GetBlogResponse, error)) {
	fake.archiveBlogMutex.Lock()
	defer fake.archiveBlogMutex.Unlock()
	fake.ArchiveBlogStub = stub
}

func (fake *FakeBlogService) ArchiveBlogArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.archiveBlogMutex.RLock()
	defer fake.archiveBlogMutex.RUnlock()
	argsForCall := fake.archiveBlogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogService) ArchiveBlogReturns(result1 service.GetBlogResponse, result2 error) {
	fake.archiveBlogMutex.Lock()
	defer fake.archiveBlogMutex.Unlock()
	fake.ArchiveBlogStub = nil
	fake.archiveBlogReturns = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) ArchiveBlogReturnsOnCall(i int, result1 service.GetBlogResponse, result2 error) {
	fake.archiveBlogMutex.Lock()
	defer fake.archiveBlogMutex.Unlock()
	fake.ArchiveBlogStub = nil
	if fake.archiveBlogReturnsOnCall == nil {
		fake.archiveBlogReturnsOnCall = make(map[int]struct {
			result1 service.GetBlogResponse
			result2 error
		})
	}
	fake.archiveBlogReturnsOnCall[i] = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) CreateBlog(arg1 context.Context, arg2 service.CreateBlogRequest) (service.GetBlogResponse, error) {
	fake.createBlogMutex.Lock()
	ret, specificReturn := fake.createBlogReturnsOnCall[len(fake.createBlogArgsForCall)]
	fake.createBlogArgsForCall = append(fake.createBlogArgsForCall, struct {
		arg1 context.Context
		arg2 service.CreateBlogRequest
	}{arg1, arg2})
	stub := fake.CreateBlogStub
	fakeReturns := fake.createBlogReturns
	fake.recordInvocation("CreateBlog", []interface{}{arg1, arg2})
	fake.createBlogMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogService) CreateBlogCallCount() int {
	fake.createBlogMutex.RLock()
	defer fake.createBlogMutex.RUnlock()
	return len(fake.createBlogArgsForCall)
}

func (fake *FakeBlogService) CreateBlogCalls(stub func(context.Context, service.CreateBlogRequest) (service.GetBlogResponse, error)) {
	fake.createBlogMutex.Lock()
	defer fake.createBlogMutex.Unlock()
	fake.CreateBlogStub = stub
}

func (fake *FakeBlogService) CreateBlogArgsForCall(i int) (context.Context, service.CreateBlogRequest) {
	fake.createBlogMutex.RLock()
	defer fake.createBlogMutex.RUnlock()
	argsForCall := fake.createBlogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogService) CreateBlogReturns(result1 service.GetBlogResponse, result2 error) {
	fake.createBlogMutex.Lock()
	defer fake.createBlogMutex.Unlock()
	fake.CreateBlogStub = nil
	fake.createBlogReturns = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) CreateBlogReturnsOnCall(i int, result1 service.GetBlogResponse, result2 error) {
	fake.createBlogMutex.Lock()
	defer fake.createBlogMutex.Unlock()
	fake.CreateBlogStub = nil
	if fake.createBlogReturnsOnCall == nil {
		fake.createBlogReturnsOnCall = make(map[int]struct {
			result1 service.GetBlogResponse
			result2 error
		})
	}
	fake.createBlogReturnsOnCall[i] = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) DeleteBlog(arg1 context.Context, arg2 uuid.UUID) error {
	fake.deleteBlogMutex.Lock()
	ret, specificReturn := fake.deleteBlogReturnsOnCall[len(fake.deleteBlogArgsForCall)]
	fake.deleteBlogArgsForCall = append(fake.deleteBlogArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.DeleteBlogStub
	fakeReturns := fake.deleteBlogReturns
	fake.recordInvocation("DeleteBlog", []interface{}{arg1, arg2})
	fake.deleteBlogMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBlogService) DeleteBlogCallCount() int {
	fake.deleteBlogMutex.RLock()
	defer fake.deleteBlogMutex.RUnlock()
	return len(fake.deleteBlogArgsForCall)
}

func (fake *FakeBlogService) DeleteBlogCalls(stub func(context.Context, uuid.UUID) error) {
	fake.deleteBlogMutex.Lock()
	defer fake.deleteBlogMutex.Unlock()
	fake.DeleteBlogStub = stub
}

func (fake *FakeBlogService) DeleteBlogArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.deleteBlogMutex.RLock()
	defer fake.deleteBlogMutex.RUnlock()
	argsForCall := fake.deleteBlogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogService) DeleteBlogReturns(result1 error) {
	fake.deleteBlogMutex.Lock()
	defer fake.deleteBlogMutex.Unlock()
	fake.DeleteBlogStub = nil
	fake.deleteBlogReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlogService) DeleteBlogReturnsOnCall(i int, result1 error) {
	fake.deleteBlogMutex.Lock()
	defer fake.deleteBlogMutex.Unlock()
	fake.DeleteBlogStub = nil
	if fake.deleteBlogReturnsOnCall == nil {
		fake.deleteBlogReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBlogReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlogService) GetBlogByID(arg1 context.Context, arg2 uuid.UUID) (service.GetBlogResponse, error) {
	fake.getBlogByIDMutex.Lock()
	ret, specificReturn := fake.getBlogByIDReturnsOnCall[len(fake.getBlogByIDArgsForCall)]
	fake.getBlogByIDArgsForCall = append(fake.getBlogByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetBlogByIDStub
	fakeReturns := fake.getBlogByIDReturns
	fake.recordInvocation("GetBlogByID", []interface{}{arg1, arg2})
	fake.getBlogByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogService) GetBlogByIDCallCount() int {
	fake.getBlogByIDMutex.RLock()
	defer fake.getBlogByIDMutex.RUnlock()
	return len(fake.getBlogByIDArgsForCall)
}

func (fake *FakeBlogService) GetBlogByIDCalls(stub func(context.Context, uuid.UUID) (service.GetBlogResponse, error)) {
	fake.getBlogByIDMutex.Lock()
	defer fake.getBlogByIDMutex.Unlock()
	fake.GetBlogByIDStub = stub
}

func (fake *FakeBlogService) GetBlogByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getBlogByIDMutex.RLock()
	defer fake.getBlogByIDMutex.RUnlock()
	argsForCall := fake.getBlogByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogService) GetBlogByIDReturns(result1 service.GetBlogResponse, result2 error) {
	fake.getBlogByIDMutex.Lock()
	defer fake.getBlogByIDMutex.Unlock()
	fake.GetBlogByIDStub = nil
	fake.getBlogByIDReturns = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) GetBlogByIDReturnsOnCall(i int, result1 service.GetBlogResponse, result2 error) {
	fake.getBlogByIDMutex.Lock()
	defer fake.getBlogByIDMutex.Unlock()
	fake.GetBlogByIDStub = nil
	if fake.getBlogByIDReturnsOnCall == nil {
		fake.getBlogByIDReturnsOnCall = make(map[int]struct {
			result1 service.GetBlogResponse
			result2 error
		})
	}
	fake.getBlogByIDReturnsOnCall[i] = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) GetBlogsByAuthor(arg1 context.Context, arg2 uuid.UUID, arg3 http_server.PaginationRequest) ([]service.GetBlogResponse, int, error) {
	fake.getBlogsByAuthorMutex.Lock()
	ret, specificReturn := fake.getBlogsByAuthorReturnsOnCall[len(fake.getBlogsByAuthorArgsForCall)]
	fake.getBlogsByAuthorArgsForCall = append(fake.getBlogsByAuthorArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 http_server.PaginationRequest
	}{arg1, arg2, arg3})
	stub := fake.GetBlogsByAuthorStub
	fakeReturns := fake.getBlogsByAuthorReturns
	fake.recordInvocation("GetBlogsByAuthor", []interface{}{arg1, arg2, arg3})
	fake.getBlogsByAuthorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeBlogService) GetBlogsByAuthorCallCount() int {
	fake.getBlogsByAuthorMutex.RLock()
	defer fake.getBlogsByAuthorMutex.RUnlock()
	return len(fake.getBlogsByAuthorArgsForCall)
}

func (fake *FakeBlogService) GetBlogsByAuthorCalls(stub func(context.Context, uuid.UUID, http_server.PaginationRequest) ([]service.GetBlogResponse, int, error)) {
	fake.getBlogsByAuthorMutex.Lock()
	defer fake.getBlogsByAuthorMutex.Unlock()
	fake.GetBlogsByAuthorStub = stub
}

func (fake *FakeBlogService) GetBlogsByAuthorArgsForCall(i int) (context.Context, uuid.UUID, http_server.PaginationRequest) {
	fake.getBlogsByAuthorMutex.RLock()
	defer fake.getBlogsByAuthorMutex.RUnlock()
	argsForCall := fake.getBlogsByAuthorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBlogService) GetBlogsByAuthorReturns(result1 []service.GetBlogResponse, result2 int, result3 error) {
	fake.getBlogsByAuthorMutex.Lock()
	defer fake.getBlogsByAuthorMutex.Unlock()
	fake.GetBlogsByAuthorStub = nil
	fake.getBlogsByAuthorReturns = struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlogService) GetBlogsByAuthorReturnsOnCall(i int, result1 []service.GetBlogResponse, result2 int, result3 error) {
	fake.getBlogsByAuthorMutex.Lock()
	defer fake.getBlogsByAuthorMutex.Unlock()
	fake.GetBlogsByAuthorStub = nil
	if fake.getBlogsByAuthorReturnsOnCall == nil {
		fake.getBlogsByAuthorReturnsOnCall = make(map[int]struct {
			result1 []service.GetBlogResponse
			result2 int
			result3 error
		})
	}
	fake.getBlogsByAuthorReturnsOnCall[i] = struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlogService) GetBlogsByStatus(arg1 context.Context, arg2 string, arg3 http_server.PaginationRequest) ([]service.GetBlogResponse, int, error) {
	fake.getBlogsByStatusMutex.Lock()
	ret, specificReturn := fake.getBlogsByStatusReturnsOnCall[len(fake.getBlogsByStatusArgsForCall)]
	fake.getBlogsByStatusArgsForCall = append(fake.getBlogsByStatusArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 http_server.PaginationRequest
	}{arg1, arg2, arg3})
	stub := fake.GetBlogsByStatusStub
	fakeReturns := fake.getBlogsByStatusReturns
	fake.recordInvocation("GetBlogsByStatus", []interface{}{arg1, arg2, arg3})
	fake.getBlogsByStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeBlogService) GetBlogsByStatusCallCount() int {
	fake.getBlogsByStatusMutex.RLock()
	defer fake.getBlogsByStatusMutex.RUnlock()
	return len(fake.getBlogsByStatusArgsForCall)
}

func (fake *FakeBlogService) GetBlogsByStatusCalls(stub func(context.Context, string, http_server.PaginationRequest) ([]service.GetBlogResponse, int, error)) {
	fake.getBlogsByStatusMutex.Lock()
	defer fake.getBlogsByStatusMutex.Unlock()
	fake.GetBlogsByStatusStub = stub
}

func (fake *FakeBlogService) GetBlogsByStatusArgsForCall(i int) (context.Context, string, http_server.PaginationRequest) {
	fake.getBlogsByStatusMutex.RLock()
	defer fake.getBlogsByStatusMutex.RUnlock()
	argsForCall := fake.getBlogsByStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBlogService) GetBlogsByStatusReturns(result1 []service.GetBlogResponse, result2 int, result3 error) {
	fake.getBlogsByStatusMutex.Lock()
	defer fake.getBlogsByStatusMutex.Unlock()
	fake.GetBlogsByStatusStub = nil
	fake.getBlogsByStatusReturns = struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlogService) GetBlogsByStatusReturnsOnCall(i int, result1 []service.GetBlogResponse, result2 int, result3 error) {
	fake.getBlogsByStatusMutex.Lock()
	defer fake.getBlogsByStatusMutex.Unlock()
	fake.GetBlogsByStatusStub = nil
	if fake.getBlogsByStatusReturnsOnCall == nil {
		fake.getBlogsByStatusReturnsOnCall = make(map[int]struct {
			result1 []service.GetBlogResponse
			result2 int
			result3 error
		})
	}
	fake.getBlogsByStatusReturnsOnCall[i] = struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlogService) ListBlogs(arg1 context.Context, arg2 http_server.PaginationRequest) ([]service.GetBlogResponse, int, error) {
	fake.listBlogsMutex.Lock()
	ret, specificReturn := fake.listBlogsReturnsOnCall[len(fake.listBlogsArgsForCall)]
	fake.listBlogsArgsForCall = append(fake.listBlogsArgsForCall, struct {
		arg1 context.Context
		arg2 http_server.PaginationRequest
	}{arg1, arg2})
	stub := fake.ListBlogsStub
	fakeReturns := fake.listBlogsReturns
	fake.recordInvocation("ListBlogs", []interface{}{arg1, arg2})
	fake.listBlogsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeBlogService) ListBlogsCallCount() int {
	fake.listBlogsMutex.RLock()
	defer fake.listBlogsMutex.RUnlock()
	return len(fake.listBlogsArgsForCall)
}

func (fake *FakeBlogService) ListBlogsCalls(stub func(context.Context, http_server.PaginationRequest) ([]service.GetBlogResponse, int, error)) {
	fake.listBlogsMutex.Lock()
	defer fake.listBlogsMutex.Unlock()
	fake.ListBlogsStub = stub
}

func (fake *FakeBlogService) ListBlogsArgsForCall(i int) (context.Context, http_server.PaginationRequest) {
	fake.listBlogsMutex.RLock()
	defer fake.listBlogsMutex.RUnlock()
	argsForCall := fake.listBlogsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogService) ListBlogsReturns(result1 []service.GetBlogResponse, result2 int, result3 error) {
	fake.listBlogsMutex.Lock()
	defer fake.listBlogsMutex.Unlock()
	fake.ListBlogsStub = nil
	fake.listBlogsReturns = struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlogService) ListBlogsReturnsOnCall(i int, result1 []service.GetBlogResponse, result2 int, result3 error) {
	fake.listBlogsMutex.Lock()
	defer fake.listBlogsMutex.Unlock()
	fake.ListBlogsStub = nil
	if fake.listBlogsReturnsOnCall == nil {
		fake.listBlogsReturnsOnCall = make(map[int]struct {
			result1 []service.GetBlogResponse
			result2 int
			result3 error
		})
	}
	fake.listBlogsReturnsOnCall[i] = struct {
		result1 []service.GetBlogResponse
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlogService) PublishBlog(arg1 context.Context, arg2 uuid.UUID) (service.GetBlogResponse, error) {
	fake.publishBlogMutex.Lock()
	ret, specificReturn := fake.publishBlogReturnsOnCall[len(fake.publishBlogArgsForCall)]
	fake.publishBlogArgsForCall = append(fake.publishBlogArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.PublishBlogStub
	fakeReturns := fake.publishBlogReturns
	fake.recordInvocation("PublishBlog", []interface{}{arg1, arg2})
	fake.publishBlogMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogService) PublishBlogCallCount() int {
	fake.publishBlogMutex.RLock()
	defer fake.publishBlogMutex.RUnlock()
	return len(fake.publishBlogArgsForCall)
}

func (fake *FakeBlogService) PublishBlogCalls(stub func(context.Context, uuid.UUID) (service.GetBlogResponse, error)) {
	fake.publishBlogMutex.Lock()
	defer fake.publishBlogMutex.Unlock()
	fake.PublishBlogStub = stub
}

func (fake *FakeBlogService) PublishBlogArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.publishBlogMutex.RLock()
	defer fake.publishBlogMutex.RUnlock()
	argsForCall := fake.publishBlogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogService) PublishBlogReturns(result1 service.GetBlogResponse, result2 error) {
	fake.publishBlogMutex.Lock()
	defer fake.publishBlogMutex.Unlock()
	fake.PublishBlogStub = nil
	fake.publishBlogReturns = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) PublishBlogReturnsOnCall(i int, result1 service.GetBlogResponse, result2 error) {
	fake.publishBlogMutex.Lock()
	defer fake.publishBlogMutex.Unlock()
	fake.PublishBlogStub = nil
	if fake.publishBlogReturnsOnCall == nil {
		fake.publishBlogReturnsOnCall = make(map[int]struct {
			result1 service.GetBlogResponse
			result2 error
		})
	}
	fake.publishBlogReturnsOnCall[i] = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) UpdateBlog(arg1 context.Context, arg2 uuid.UUID, arg3 service.UpdateBlogRequest) (service.GetBlogResponse, error) {
	fake.updateBlogMutex.Lock()
	ret, specificReturn := fake.updateBlogReturnsOnCall[len(fake.updateBlogArgsForCall)]
	fake.updateBlogArgsForCall = append(fake.updateBlogArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 service.UpdateBlogRequest
	}{arg1, arg2, arg3})
	stub := fake.UpdateBlogStub
	fakeReturns := fake.updateBlogReturns
	fake.recordInvocation("UpdateBlog", []interface{}{arg1, arg2, arg3})
	fake.updateBlogMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogService) UpdateBlogCallCount() int {
	fake.updateBlogMutex.RLock()
	defer fake.updateBlogMutex.RUnlock()
	return len(fake.updateBlogArgsForCall)
}

func (fake *FakeBlogService) UpdateBlogCalls(stub func(context.Context, uuid.UUID, service.UpdateBlogRequest) (service.GetBlogResponse, error)) {
	fake.updateBlogMutex.Lock()
	defer fake.updateBlogMutex.Unlock()
	fake.UpdateBlogStub = stub
}

func (fake *FakeBlogService) UpdateBlogArgsForCall(i int) (context.Context, uuid.UUID, service.UpdateBlogRequest) {
	fake.updateBlogMutex.RLock()
	defer fake.updateBlogMutex.RUnlock()
	argsForCall := fake.updateBlogArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBlogService) UpdateBlogReturns(result1 service.GetBlogResponse, result2 error) {
	fake.updateBlogMutex.Lock()
	defer fake.updateBlogMutex.Unlock()
	fake.UpdateBlogStub = nil
	fake.updateBlogReturns = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) UpdateBlogReturnsOnCall(i int, result1 service.GetBlogResponse, result2 error) {
	fake.updateBlogMutex.Lock()
	defer fake.updateBlogMutex.Unlock()
	fake.UpdateBlogStub = nil
	if fake.updateBlogReturnsOnCall == nil {
		fake.updateBlogReturnsOnCall = make(map[int]struct {
			result1 service.GetBlogResponse
			result2 error
		})
	}
	fake.updateBlogReturnsOnCall[i] = struct {
		result1 service.GetBlogResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlogService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.BlogService = new(FakeBlogService)
