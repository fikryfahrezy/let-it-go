// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"context"
	"sync"

	"github.com/fikryfahrezy/let-it-go/feature/blog/repository"
	"github.com/google/uuid"
)

type FakeBlogRepository struct {
	CountStub        func(context.Context) (int, error)
	countMutex       sync.RWMutex
	countArgsForCall []struct {
		arg1 context.Context
	}
	countReturns struct {
		result1 int
		result2 error
	}
	countReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CountByStatusStub        func(context.Context, string) (int, error)
	countByStatusMutex       sync.RWMutex
	countByStatusArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	countByStatusReturns struct {
		result1 int
		result2 error
	}
	countByStatusReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CreateStub        func(context.Context, repository.Blog) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 repository.Blog
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(context.Context, uuid.UUID) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetByAuthorIDStub        func(context.Context, uuid.UUID, int, int) ([]repository.Blog, error)
	getByAuthorIDMutex       sync.RWMutex
	getByAuthorIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 int
		arg4 int
	}
	getByAuthorIDReturns struct {
		result1 []repository.Blog
		result2 error
	}
	getByAuthorIDReturnsOnCall map[int]struct {
		result1 []repository.Blog
		result2 error
	}
	GetByIDStub        func(context.Context, uuid.UUID) (repository.Blog, error)
	getByIDMutex       sync.RWMutex
	getByIDArgsForCall []struct {
		arg1 context.Context
		arg2 uuid.UUID
	}
	getByIDReturns struct {
		result1 repository.Blog
		result2 error
	}
	getByIDReturnsOnCall map[int]struct {
		result1 repository.Blog
		result2 error
	}
	GetByStatusStub        func(context.Context, string, int, int) ([]repository.Blog, error)
	getByStatusMutex       sync.RWMutex
	getByStatusArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}
	getByStatusReturns struct {
		result1 []repository.Blog
		result2 error
	}
	getByStatusReturnsOnCall map[int]struct {
		result1 []repository.Blog
		result2 error
	}
	ListStub        func(context.Context, int, int) ([]repository.Blog, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}
	listReturns struct {
		result1 []repository.Blog
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []repository.Blog
		result2 error
	}
	UpdateStub        func(context.Context, repository.Blog) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 repository.Blog
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlogRepository) Count(arg1 context.Context) (int, error) {
	fake.countMutex.Lock()
	ret, specificReturn := fake.countReturnsOnCall[len(fake.countArgsForCall)]
	fake.countArgsForCall = append(fake.countArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.CountStub
	fakeReturns := fake.countReturns
	fake.recordInvocation("Count", []interface{}{arg1})
	fake.countMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogRepository) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeBlogRepository) CountCalls(stub func(context.Context) (int, error)) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = stub
}

func (fake *FakeBlogRepository) CountArgsForCall(i int) context.Context {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	argsForCall := fake.countArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBlogRepository) CountReturns(result1 int, result2 error) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	fake.countReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) CountReturnsOnCall(i int, result1 int, result2 error) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = nil
	if fake.countReturnsOnCall == nil {
		fake.countReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.countReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) CountByStatus(arg1 context.Context, arg2 string) (int, error) {
	fake.countByStatusMutex.Lock()
	ret, specificReturn := fake.countByStatusReturnsOnCall[len(fake.countByStatusArgsForCall)]
	fake.countByStatusArgsForCall = append(fake.countByStatusArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.CountByStatusStub
	fakeReturns := fake.countByStatusReturns
	fake.recordInvocation("CountByStatus", []interface{}{arg1, arg2})
	fake.countByStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogRepository) CountByStatusCallCount() int {
	fake.countByStatusMutex.RLock()
	defer fake.countByStatusMutex.RUnlock()
	return len(fake.countByStatusArgsForCall)
}

func (fake *FakeBlogRepository) CountByStatusCalls(stub func(context.Context, string) (int, error)) {
	fake.countByStatusMutex.Lock()
	defer fake.countByStatusMutex.Unlock()
	fake.CountByStatusStub = stub
}

func (fake *FakeBlogRepository) CountByStatusArgsForCall(i int) (context.Context, string) {
	fake.countByStatusMutex.RLock()
	defer fake.countByStatusMutex.RUnlock()
	argsForCall := fake.countByStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogRepository) CountByStatusReturns(result1 int, result2 error) {
	fake.countByStatusMutex.Lock()
	defer fake.countByStatusMutex.Unlock()
	fake.CountByStatusStub = nil
	fake.countByStatusReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) CountByStatusReturnsOnCall(i int, result1 int, result2 error) {
	fake.countByStatusMutex.Lock()
	defer fake.countByStatusMutex.Unlock()
	fake.CountByStatusStub = nil
	if fake.countByStatusReturnsOnCall == nil {
		fake.countByStatusReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.countByStatusReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) Create(arg1 context.Context, arg2 repository.Blog) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 repository.Blog
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBlogRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeBlogRepository) CreateCalls(stub func(context.Context, repository.Blog) error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeBlogRepository) CreateArgsForCall(i int) (context.Context, repository.Blog) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogRepository) CreateReturns(result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlogRepository) CreateReturnsOnCall(i int, result1 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlogRepository) Delete(arg1 context.Context, arg2 uuid.UUID) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBlogRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeBlogRepository) DeleteCalls(stub func(context.Context, uuid.UUID) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeBlogRepository) DeleteArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogRepository) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlogRepository) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlogRepository) GetByAuthorID(arg1 context.Context, arg2 uuid.UUID, arg3 int, arg4 int) ([]repository.Blog, error) {
	fake.getByAuthorIDMutex.Lock()
	ret, specificReturn := fake.getByAuthorIDReturnsOnCall[len(fake.getByAuthorIDArgsForCall)]
	fake.getByAuthorIDArgsForCall = append(fake.getByAuthorIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetByAuthorIDStub
	fakeReturns := fake.getByAuthorIDReturns
	fake.recordInvocation("GetByAuthorID", []interface{}{arg1, arg2, arg3, arg4})
	fake.getByAuthorIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogRepository) GetByAuthorIDCallCount() int {
	fake.getByAuthorIDMutex.RLock()
	defer fake.getByAuthorIDMutex.RUnlock()
	return len(fake.getByAuthorIDArgsForCall)
}

func (fake *FakeBlogRepository) GetByAuthorIDCalls(stub func(context.Context, uuid.UUID, int, int) ([]repository.Blog, error)) {
	fake.getByAuthorIDMutex.Lock()
	defer fake.getByAuthorIDMutex.Unlock()
	fake.GetByAuthorIDStub = stub
}

func (fake *FakeBlogRepository) GetByAuthorIDArgsForCall(i int) (context.Context, uuid.UUID, int, int) {
	fake.getByAuthorIDMutex.RLock()
	defer fake.getByAuthorIDMutex.RUnlock()
	argsForCall := fake.getByAuthorIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeBlogRepository) GetByAuthorIDReturns(result1 []repository.Blog, result2 error) {
	fake.getByAuthorIDMutex.Lock()
	defer fake.getByAuthorIDMutex.Unlock()
	fake.GetByAuthorIDStub = nil
	fake.getByAuthorIDReturns = struct {
		result1 []repository.Blog
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) GetByAuthorIDReturnsOnCall(i int, result1 []repository.Blog, result2 error) {
	fake.getByAuthorIDMutex.Lock()
	defer fake.getByAuthorIDMutex.Unlock()
	fake.GetByAuthorIDStub = nil
	if fake.getByAuthorIDReturnsOnCall == nil {
		fake.getByAuthorIDReturnsOnCall = make(map[int]struct {
			result1 []repository.Blog
			result2 error
		})
	}
	fake.getByAuthorIDReturnsOnCall[i] = struct {
		result1 []repository.Blog
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) GetByID(arg1 context.Context, arg2 uuid.UUID) (repository.Blog, error) {
	fake.getByIDMutex.Lock()
	ret, specificReturn := fake.getByIDReturnsOnCall[len(fake.getByIDArgsForCall)]
	fake.getByIDArgsForCall = append(fake.getByIDArgsForCall, struct {
		arg1 context.Context
		arg2 uuid.UUID
	}{arg1, arg2})
	stub := fake.GetByIDStub
	fakeReturns := fake.getByIDReturns
	fake.recordInvocation("GetByID", []interface{}{arg1, arg2})
	fake.getByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogRepository) GetByIDCallCount() int {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return len(fake.getByIDArgsForCall)
}

func (fake *FakeBlogRepository) GetByIDCalls(stub func(context.Context, uuid.UUID) (repository.Blog, error)) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = stub
}

func (fake *FakeBlogRepository) GetByIDArgsForCall(i int) (context.Context, uuid.UUID) {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	argsForCall := fake.getByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogRepository) GetByIDReturns(result1 repository.Blog, result2 error) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = nil
	fake.getByIDReturns = struct {
		result1 repository.Blog
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) GetByIDReturnsOnCall(i int, result1 repository.Blog, result2 error) {
	fake.getByIDMutex.Lock()
	defer fake.getByIDMutex.Unlock()
	fake.GetByIDStub = nil
	if fake.getByIDReturnsOnCall == nil {
		fake.getByIDReturnsOnCall = make(map[int]struct {
			result1 repository.Blog
			result2 error
		})
	}
	fake.getByIDReturnsOnCall[i] = struct {
		result1 repository.Blog
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) GetByStatus(arg1 context.Context, arg2 string, arg3 int, arg4 int) ([]repository.Blog, error) {
	fake.getByStatusMutex.Lock()
	ret, specificReturn := fake.getByStatusReturnsOnCall[len(fake.getByStatusArgsForCall)]
	fake.getByStatusArgsForCall = append(fake.getByStatusArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetByStatusStub
	fakeReturns := fake.getByStatusReturns
	fake.recordInvocation("GetByStatus", []interface{}{arg1, arg2, arg3, arg4})
	fake.getByStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogRepository) GetByStatusCallCount() int {
	fake.getByStatusMutex.RLock()
	defer fake.getByStatusMutex.RUnlock()
	return len(fake.getByStatusArgsForCall)
}

func (fake *FakeBlogRepository) GetByStatusCalls(stub func(context.Context, string, int, int) ([]repository.Blog, error)) {
	fake.getByStatusMutex.Lock()
	defer fake.getByStatusMutex.Unlock()
	fake.GetByStatusStub = stub
}

func (fake *FakeBlogRepository) GetByStatusArgsForCall(i int) (context.Context, string, int, int) {
	fake.getByStatusMutex.RLock()
	defer fake.getByStatusMutex.RUnlock()
	argsForCall := fake.getByStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeBlogRepository) GetByStatusReturns(result1 []repository.Blog, result2 error) {
	fake.getByStatusMutex.Lock()
	defer fake.getByStatusMutex.Unlock()
	fake.GetByStatusStub = nil
	fake.getByStatusReturns = struct {
		result1 []repository.Blog
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) GetByStatusReturnsOnCall(i int, result1 []repository.Blog, result2 error) {
	fake.getByStatusMutex.Lock()
	defer fake.getByStatusMutex.Unlock()
	fake.GetByStatusStub = nil
	if fake.getByStatusReturnsOnCall == nil {
		fake.getByStatusReturnsOnCall = make(map[int]struct {
			result1 []repository.Blog
			result2 error
		})
	}
	fake.getByStatusReturnsOnCall[i] = struct {
		result1 []repository.Blog
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) List(arg1 context.Context, arg2 int, arg3 int) ([]repository.Blog, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlogRepository) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeBlogRepository) ListCalls(stub func(context.Context, int, int) ([]repository.Blog, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeBlogRepository) ListArgsForCall(i int) (context.Context, int, int) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBlogRepository) ListReturns(result1 []repository.Blog, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []repository.Blog
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) ListReturnsOnCall(i int, result1 []repository.Blog, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []repository.Blog
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []repository.Blog
		result2 error
	}{result1, result2}
}

func (fake *FakeBlogRepository) Update(arg1 context.Context, arg2 repository.Blog) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 repository.Blog
	}{arg1, arg2})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeBlogRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeBlogRepository) UpdateCalls(stub func(context.Context, repository.Blog) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeBlogRepository) UpdateArgsForCall(i int) (context.Context, repository.Blog) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlogRepository) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlogRepository) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeBlogRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlogRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.BlogRepository = new(FakeBlogRepository)
